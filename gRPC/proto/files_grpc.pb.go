// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: gRPC/proto/files.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FilesService_SendToGRPCServer_FullMethodName     = "/proto.FilesService/SendToGRPCServer"
	FilesService_DeleteFromGRPCServer_FullMethodName = "/proto.FilesService/DeleteFromGRPCServer"
	FilesService_GetFromGRPCServer_FullMethodName    = "/proto.FilesService/GetFromGRPCServer"
)

// FilesServiceClient is the client API for FilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesServiceClient interface {
	SendToGRPCServer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileSendRequest, FileSendResponse], error)
	DeleteFromGRPCServer(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFromGRPCServer(ctx context.Context, in *FileGetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileGetResponse], error)
}

type filesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesServiceClient(cc grpc.ClientConnInterface) FilesServiceClient {
	return &filesServiceClient{cc}
}

func (c *filesServiceClient) SendToGRPCServer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileSendRequest, FileSendResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FilesService_ServiceDesc.Streams[0], FilesService_SendToGRPCServer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileSendRequest, FileSendResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesService_SendToGRPCServerClient = grpc.ClientStreamingClient[FileSendRequest, FileSendResponse]

func (c *filesServiceClient) DeleteFromGRPCServer(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FilesService_DeleteFromGRPCServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) GetFromGRPCServer(ctx context.Context, in *FileGetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileGetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FilesService_ServiceDesc.Streams[1], FilesService_GetFromGRPCServer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileGetRequest, FileGetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesService_GetFromGRPCServerClient = grpc.ServerStreamingClient[FileGetResponse]

// FilesServiceServer is the server API for FilesService service.
// All implementations must embed UnimplementedFilesServiceServer
// for forward compatibility.
type FilesServiceServer interface {
	SendToGRPCServer(grpc.ClientStreamingServer[FileSendRequest, FileSendResponse]) error
	DeleteFromGRPCServer(context.Context, *FileDeleteRequest) (*emptypb.Empty, error)
	GetFromGRPCServer(*FileGetRequest, grpc.ServerStreamingServer[FileGetResponse]) error
	mustEmbedUnimplementedFilesServiceServer()
}

// UnimplementedFilesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilesServiceServer struct{}

func (UnimplementedFilesServiceServer) SendToGRPCServer(grpc.ClientStreamingServer[FileSendRequest, FileSendResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendToGRPCServer not implemented")
}
func (UnimplementedFilesServiceServer) DeleteFromGRPCServer(context.Context, *FileDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromGRPCServer not implemented")
}
func (UnimplementedFilesServiceServer) GetFromGRPCServer(*FileGetRequest, grpc.ServerStreamingServer[FileGetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFromGRPCServer not implemented")
}
func (UnimplementedFilesServiceServer) mustEmbedUnimplementedFilesServiceServer() {}
func (UnimplementedFilesServiceServer) testEmbeddedByValue()                      {}

// UnsafeFilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServiceServer will
// result in compilation errors.
type UnsafeFilesServiceServer interface {
	mustEmbedUnimplementedFilesServiceServer()
}

func RegisterFilesServiceServer(s grpc.ServiceRegistrar, srv FilesServiceServer) {
	// If the following call pancis, it indicates UnimplementedFilesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FilesService_ServiceDesc, srv)
}

func _FilesService_SendToGRPCServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesServiceServer).SendToGRPCServer(&grpc.GenericServerStream[FileSendRequest, FileSendResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesService_SendToGRPCServerServer = grpc.ClientStreamingServer[FileSendRequest, FileSendResponse]

func _FilesService_DeleteFromGRPCServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).DeleteFromGRPCServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesService_DeleteFromGRPCServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).DeleteFromGRPCServer(ctx, req.(*FileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_GetFromGRPCServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServiceServer).GetFromGRPCServer(m, &grpc.GenericServerStream[FileGetRequest, FileGetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesService_GetFromGRPCServerServer = grpc.ServerStreamingServer[FileGetResponse]

// FilesService_ServiceDesc is the grpc.ServiceDesc for FilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FilesService",
	HandlerType: (*FilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFromGRPCServer",
			Handler:    _FilesService_DeleteFromGRPCServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendToGRPCServer",
			Handler:       _FilesService_SendToGRPCServer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFromGRPCServer",
			Handler:       _FilesService_GetFromGRPCServer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gRPC/proto/files.proto",
}
